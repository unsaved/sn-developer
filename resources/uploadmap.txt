# Config file for 'snUpload' that maps files to target SN records and field.
# Comment lines must begin with #
# Empty lines ignored
# Limitations:  # for comment purpose only honored as very first char on line.
# localFileSpec values are for matching against the user-specified upload file path.
#    Since upload calls use (local) relative paths, the localFileSpecs are either
#    local relative file paths; or a regular expression matching the same.
#    Regular expression localFileSpecs are coded like '/expr/' or '/expr/i'.
#    No literal space or tab characters allowed inside localFileSpecs (incl. /regexp/s).
#    Use # to represent files in localFileSpec literals or regexps.
#    Since you are not writing JavaScript, you don't need to double-up backslashes,
#    but as always with regexs, you do need to escape all forward slashes and dots;
#    and don't forget to sandwich with ^...$ if you want to start or end as specified.
# keyvalue values may be special constant * or <, with the following meanings.
# In case of regexp + one of these special keyvalue constants, the final submitted
# key value will consist of some of the submitted value, not part of the regexp string.
#  *  same as datafile value (with directory path removed, if any),
#  <  basename of datafile (i.e. without directory path and suffix).
#  /  datafile with directory path but without suffix).
#  =  datafile value exactly
# ESCAPING
#   After the optional constant and regexp transformations, these special character
#   sequences in key values are replaced the with specified characters:
#     FROM # TO ' ' (space character")
#     FROM ~{ TO (
#     FROM ~} TO )
#     FROM ~ TO /
# As an example of special keyvalue constants, if we had keyvalue of <
# for the subdir/g#pl~}y.txt line below, that would attempt to upload to
# a record with key value of "g pl/y".
# Similarly, if you had a local relative file "alpha/g#pl~}y.js", the
# system would attempt to upload a record with key value of "g pl/y"
# due to the last line below.

# If more than one map entry matches the specified path, then the first
# qualifying record will be used.
# keyfield may actually be multiple comma-delimited fields.
# In that case, the final key value string must be +-delimited key values
# of the same number of elements as number of fields.

# In nearly all cases, you can easily narrow to your single target record by
# using 'keyfield' of the table's display field or "name", with sys_scope
# specified where there are alternate records for different sys_scopes.
# You could always set 'keyfield' to "sys_id".

# Specifications lines must have 5 to 7 tokens in this order:
# Files without lint checking:
#   localFileSpec table datafield keyfield kevalue [sys_scope]
# Files to be lint-checked:
#   localFileSpec table datafield keyfield kevalue sys_scope lint_alt
# sys_scope value unspecified (without lint-checking) or - (with lint-checking)
# mean to not constrain scope.
# lint_alt value (even if -) must be specified if lint checking will be done.
# A value of - means the default snLint-alt for that script type.

#localFileSpec   table        datafield  keyfield  keyvalue         sys_scope  lint_alt
play.js          u_text_file  u_content  u_path    *                -          -
subdir/g#ply.txt u_text_file  u_content  u_path    global-play.txt
/.+[.]js$/       sys_script_include script u_path  <                global     global
